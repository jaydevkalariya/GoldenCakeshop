import React, { useState,useEffect } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import axios from 'axios';
import styled from 'styled-components';
import { useCartContext } from "./context/cart_context";
import { useUserContext } from './context/user_context';
import { useShippingContext } from './context/shipping_context';
import { URI } from './App';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';

import 'react-datepicker/dist/react-datepicker.css';


const Order = () => {
  const navigate = useNavigate();
  
  const { cart, clearCart, total_price } = useCartContext();
  // const { address,date } = useShippingContext();
  const { user } = useUserContext();
  const stripe = useStripe();
  const elements = useElements();
  const [cardName, setCardName] = useState('');
  const [cardNumberError, setCardNumberError] = useState(null);
   const [address, setAddress] = useState('');
  const [amount, setAmount] = useState(total_price);
  const [selectedDateTime, setSelectedDateTime] = useState(null);
  const [isButtonDisabled, setIsButtonDisabled] = useState(false);
  
//   useEffect(()=>{
//     console.log(address,date)
//     // setAddress(address);
     
// },[])


  const handleDateTimeChange = (date) => {
    setSelectedDateTime(date);
  };
  const handleCardNameChange = (event) => {
    setCardName(event.target.value);
  };

  const handleCardNumberChange = (event) => {
    if (event.error) {
      setCardNumberError(event.error.message);
    } else {
      setCardNumberError(null);
    }
  };

  const handleAddressChange = (event) => {
    setAddress(event.target.value);
  };

  const handleAmountChange = (event) => {
    setAmount(event.target.value);
  };

  const handleSubmit = async (event) => {
   
    event.preventDefault();
    console.log(selectedDateTime)
    if (!stripe || !elements || cardNumberError) {
      return;
    }
    setIsButtonDisabled(true);
    const cardElement = elements.getElement(CardElement);

    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: cardElement,
      billing_details: {
        name: cardName,
        address: {
          line1: address,
        },
      },
    });
    // console.log("one");
    if (error) {
      console.error(error);
    } else {
      // console.log(cart);
      // console.log("Two");
      try {
        const response = await axios.post(`${URI}/orders/process-payment`, {
          paymentMethodId: paymentMethod.id,
          address,
          time:selectedDateTime ,
          amount: parseInt(amount + 50, 10),
          order: cart,
          user: user,
        },
          {
            withCredentials: true,
            headers: {
              "Content-Type": "application/json",
            },
          },);
          // console.log("two");
        const client_secret = response.data.client_secret;
    
        // Confirm the payment on the client-side
        const result = await stripe.confirmCardPayment(client_secret, {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: cardName,
              address: {
                line1: address,
              },
            },
          },
        });
        console.log("Three");
        if (result.error) {
          console.error(result.error);
        } else {

          if (result.paymentIntent.status === "succeeded") {
           
            toast.success('Your Order is Placed.');
            navigate('/');
            clearCart();
          }
        }
      } catch (error) {
        toast.error(error);
      }
      finally{
        // console.log("Hello from Order.js page");
        setIsButtonDisabled(false);
      }
     
         
       
    }
  };
 
  return (
    <Wrapper>
      <div className="payment-page">

        <h2>Pay now</h2>
        
        <form onSubmit={handleSubmit} className="payment-form">
          <div className="form-group">
            <label htmlFor="card-name">Cardholder Name</label>
            <input
              type="text"
              id="card-name"
              value={cardName}
              onChange={handleCardNameChange}
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="card-number">Card Number</label>
            <CardElement
              id="card-number"
              options={{
                style: {
                  base: {
                    fontSize: '16px',
                  },
                },
              }}
              onChange={handleCardNumberChange}
            />
            {cardNumberError && <div className="error">{cardNumberError}</div>}
          </div>

          <div className="form-group">
            <label htmlFor="address">Address</label>
            <textarea
              type="text"
              id="address"
              value={address}
              onChange={handleAddressChange}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="address">Time & date</label>
            <DatePicker
              selected={selectedDateTime}
              onChange={handleDateTimeChange}
              showTimeSelect
              dateFormat="Pp"
            />
          </div>

          <div className="form-group">
            <label htmlFor="amount">Amount</label>
            <input
              type="number"
              id="amount"
              min="0"
              value={amount + 50}
              onChange={handleAmountChange}
              required
              disabled
            />
          </div>

          <button type="submit" disabled={!stripe || cardNumberError}>
          {isButtonDisabled ? 'Processing...' : 'Pay Now'}
          </button>
        </form>
      </div>
    </Wrapper>
  );
};

export default Order;



const Wrapper = styled.section`
.payment-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
   
    padding: 20px;
   
  }
  
  .payment-form {
    box-shadow:2px 2px 2px 2px lightgrey;
    display: flex;
    flex-direction: column;
    max-width: 400px;
    width: 100%;
    margin-top: 40px;
    padding:2rem;
  }
  
  .form-group {
    display: flex;
  flex-direction: column;
  margin-bottom: 20px;
  }
  
  label {
    font-weight: bold;
  }
  
  input[type='text'] {
    padding: 8px;
    font-size: 16px;
  }
  
  button {
    padding: 10px;
    background-color: #007bff;
    color: #fff;
    border: none;
    cursor: pointer;
    margin-top: 20px;
  }
  
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  .error {
    color: red;
    font-size: 14px;
    margin-top: 5px;
  }
  
  /* Media Queries */
  @media screen and (max-width: 480px) {
    .payment-form {
      max-width: 300px;
    }
  }
  
  
  
    `;